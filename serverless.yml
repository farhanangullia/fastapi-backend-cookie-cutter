service: sample
frameworkVersion: "3.38.0"
plugins:
  - serverless-better-credentials
  - serverless-dotenv-plugin

## Using module to load enviornment variables
useDotenv: true
provider:
  name: aws
  runtime: python3.11
  profile: internal
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "ecr:InitiateLayerUpload"
            - "ecr:SetRepositoryPolicy"
            - "ecr:GetRepositoryPolicy"
          Resource:
            !Join 
              - ':'
              - - 'arn:aws:ecr'
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - 'repository/*'

  stackTags:
    App: ${self:custom.appName}-${self:provider.stage}
    CFStack: ${self:custom.appName}-${self:provider.stage}

  ## Give a custom stack name
  stackName: ${self:provider.stage}-${self:custom.appName}

  ## Define Environment Variables that will be available to Functions
  environment:
    LOG_LEVEL: "INFO"
    STAGE: ${self:provider.stage}

custom:
  appName: sample
  pythonRequirements:
    dockerizePip: true
package:
  individually: true
  patterns:
    - "!*.txt"
    - "!*.md"
    - "!*.json"
    - "!node_modules/**"
    - "!layers/**"
    - "!resources/**"
    - "!src/**"
functions:
  sample:
    name: ${self:custom.appName}-${self:provider.stage}-sample
    description: ${self:custom.appName}-${self:provider.stage}-sample
    image: 388423642950.dkr.ecr.ap-southeast-1.amazonaws.com/sample/sample-lambda:latest
    timeout: 30
    events: 
    - http:
        path: healthz
        method: get
        cors: true
        private: false